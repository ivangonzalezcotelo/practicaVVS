TO DO LIST

Instrucciones:
	En cuanto decidais lo que quereis hacer, primero modificad este archivo y hacer commit.
	Lo que os dije ya más de una vez, no os rayeis con un apartado, es mejor que anoteis dudas aquí y seguid con otro punto.
	Si veis que falta algo añadidlo a la lista y avisad, de la misma forma que si veis que algo de lo que está aquí sobra avisad tb.
	El código esta dividido en 3 partes, lo más aconsejable para que eclipse no nos la lie con referencias sin crear es acabar una fase antes de empezar otra.


Diagrama clases							Iván
	Diagrama paquetes					Iván
	Diagrama Producto					Iván
	Diagrama Puja						Iván
	Diagrama Categoria					Iván
Diagrama de servicios					Iván

Código
1ª Parte
	Creación bases de datos 
	Creación paquete Producto 			Iván
		Clase principal					Iván
		Daointerface					Iván
		Dao implementación				Iván
	Creación paquete Categoría			David
		Clase principal					David
		Daointerface					David
		Dao implementación				David
	Creación paquete Puja				David
		Clase principal					David	
		Daointerface					David
		Dao implementación				David
2ª Parte
	Finalización servicio Usuario
		Archivo con InsertAuction		Breixo
		Archivo con findActiveAuction   Breixo
		Archivo con makeBid				Iván
		Archivo con listBids			Iván
		Archivo con ListProducts		Breixo	
3ª Parte
	Creación test userService			David
	Creación test bidService			David
	Creación test productService		David


	Implementación de version en product.
	No estoy muy seguro que la consulta de findByKey este bien planteada, echadle un OjO.
	Service de category
	
	- ProductService:
		- insertProduct lanza instancenotfoundexception cuando se pasa un id de categoria invalido por URL
		Hay que hacer comprobación de que el catId existe en al base de datos.
	Por implementación eso non debería dar instancenotfoundexceptión, debería ser capturada e
	devolta unha lista vacia, desa categoria nn hay productos
			
	- en BidService está bien poner @Service("userService").
	No, non esta ben, colouseme o facer copy-paste do userServiceImpl, como non canta o eclipse q
	eso ta mal nin o vin. Xa ta correxido.
	
	- declarar INCREMENTO una constante GLOBAL?
	O mismo, non sabia se o iva a usar pa outra cousa e en principio foi unha proba de como se
	creaban os BigDecimal, que non tiña idea. Xa ta correxida.
	
	- Todos os findBy... non deberian lanzar un NotFoundException??
	Se se devolve un solo producto si que hay q dar instance not found, se se devolven varios,
	depende moito do caso, eu particularmente prefiero nn dalos, devolves lista vacia e xa está.
	
	- o listBids(BidServiceImpl) non está mal que devolva no catch o mismo que si funciona ben?	
	Devolve a lista vacia, nn existe ningun elemento para ese user.
	Poderia devolver un instanceNotFoundException, pero e tan valido decir que ese usuario
	non ten pujas como decir que ese usuario non existe.
	
	- Service de Category pode ser necesario, porque o usuario pode añadir máis. é simple e fácil de facer.
	Si que se pode facer, pero como non estamos cerrando a implementación, eso seria para un version posterior
	do programa, ahora mismo non o piden nin o queren, de feito mandannos no pdf que non xoguemos
	xa con categoria, que son metidas a machete na base de datos.	
	
	
	He añadido un metodo mas a categorias que será necesario, getAllCategories,
	se va a utilizar para hacer el desplegable de categorias para escoger.
	
	
	CAMBIOS HECHOS REVISION 58:
	
		Basicamente he ido revisando todo para que fuera coherente con la base de datos, 
		Primero en los daos le pasabamos longs en vez de objetos para que buscara y eso petaba.
		Segundo habia matcheos de spring en bid y product que no concordaban con la base de datos.
		Entre estas 2 cosas he resuelto casi todos los problemas que existen.
		Fallan actualmente 5 tests, 3 de bidService y 2 de productService.
			testMakeBid y testTwoMakeBids fallan los 3 por lo mismo, a la hora de hacer bidDao.save(bid) da el error de que productId no tiene valor por defecto.
				He cambiado makeBid para que funcione bien en todos los casos, pero el dao sigue dando este error que no entiendo.
			testfindActiveAuctions y testfindNoActiveAuctions fallan tambien por lo mismo, la consulta del contains no la esta cogiendo.
				Si podeis probar a meter a mano productos y hacer esa consulta desde mysql seria perfecto, si falla y es porque no acepta el contains hay que cambiarla y hacer parseo a mano
				
		He quitado el campo version de product, da errores raros con el, y no tengo ganas de pelearme con eso ahora.
		
		
	CAMBIOS HECHOS REVISION 60:
		
		Errores solucionados en BidService, esa por el tema de los NOT NULL en las claves foraneas, fue quitar eso un matcheo en la clase bid que seguía mal y nada mas.
		Fallan actualmente 2 tests de productService.
			testfindActiveAuctions y testfindNoActiveAuctions fallan por lo mismo, la consulta del contains no la esta cogiendo.
				Si podeis probar a meter a mano productos y hacer esa consulta desde mysql seria perfecto, si falla y es porque no acepta el contains hay que cambiarla y hacer parseo a mano
	CAMBIOS HECHOS REVISION 61:
		Cambios en el script de base de datos: reemplazado el tipo de dato date x datetime, ya que date solo
		almacenaba la fecha pero no la hora. Esto provocaba que las consultas de productos activos no devolvieran nada.
		Product: Añadidas anotaciones @temporal, para el mapeo a la base de datos.
		ProductDao: Añadida una funcion privada para dado una lista de palabras y una de productos eliminar los que no contengas dichas palabras.
			Ya no se envia la fecha de fin del producto, se usa now() en la consulta( No tngo muy claro xk pero me daba problemas)
			finByKey: Debido a lo de page by page tiene que devolver siempre count resultados si los hay la funcion me ha quedado bastante extraña. 
			La consulta devuelve count resultados, pero no todos son validos despues de filtrados, asique hay que buscar mas hasta llegar a count o que
			la consulta devuelva menos de count.
			Si se hace una busqueda con una sola palabra se realiza una consulta con LIKE.
			Creo que eso es todo. 
			A lo mejor deberiamos añadir mas test, vosotros que opinais?
	CAMBIOS HECHOS REVISION 63:
		ProductServiceTest: El test que fallaba estaba mal, se buscaba x una palabra que no estaba en ningun producto.
							Añadidos mas test.
		ProductDaoHibernate: findBykey Ahora se busca siempre sobre activos y apartir de ahi filtra x key.
							 findByKeyAndCategory busca x activos y category y apartir de ahi filtr x key.
							 				
							 				

CORRECCIÓN

Dividir diagrama de DAOs y Servicios en 2 // Falta subir imágenes	CORREGIDO
Actualizar diagrama de clases // Falta subir imágenes				CORREGIDO
Implementar version													CORREGIDO
Implementar batchsize												CORREGIDO
BidDao-> Sobra findByProduct										CORREGIDO
CategoryDao -> Sobra findByCatName 									CORREGIDO
ProductDao -> Sobran 4 funcións que son sustituidos por 1 solo.		CORREGIDO

ProductService -> Buscar producto por ID (findProductDetails), implementar findAllCategories
				aqui (non necesario CategoryService)	CORREGIDO/NO PROBADO
				getRemainingTime (@Temporal) para que non proteste Hibernate e
				deixar mais limpia a capa Web -> Declarado Transient	CORREGIDO																												NO ES UN CALENDAR, ES UN INT, POR LO QUE LA ANOTACION TEMPORAL DA ERROR																								AL SOLO PERMITIR DATE, CALENDAR O TIMESTAMP. 

BidService -> MakeBid que lance a excepción, no capturarlas. CORREGIDO

BidTest -> Comprobar que os datos son os que teñen que ser (precio actual é o correcto),
non que se inserte. Facer os 3 casos de proba ilustrados no enunciado.

Sustituir pasar os objetos por simplemente os IDs		CORREGIDO/ FALLA AL INTENTAR LLAMAR A UN ATRIBUTO DEL OBJETO BUSCADO.


RESUMEN REVISION 71:
	Version sigue en sus 13 de no querer funcionar, añadido el campo a la tabla SQL, sigue comentada en el codigo
	Cambiado ProductDao, ahora es una sola funcion y un par auxiliares, para reutilizar codigo, aunque pasaron a ser private.
	ProductService y BidService se arreglaron las excepciones y se dejan fluir
	Se añadio a ProductService los metodos de findAllCategories y findByProductId
	El metodo getRemainingTime esta hecho pero esta comentado al tener problemas.
	Sustituidos los objetos por sus Ids en los daos, pero falla al intentar llegar a ellos a traves de los objetos en sql.
	
RESUMEN REVISION 73:
	Los errores que daba eran por las consultas hql, se hacia referencia a una propiedad de userProfile con
	nombre incorrecto ( usrId en vez de userProfileId).
	En productServices.findByActiveAuctions se daba la posibilidad de hacer null.getCatId x lo que daba error
	con los test al buscar sin categoria.
	Ahora solo falta mejorar los test, añadir algunos mas, @version y @batchsize
RESUMEN REVISION 74:
	Version fallaba por tener Long en product en vez de tipo long, no tngo muy claro el xk pero haciendo el 
	cambio funciona.
	
BatchSize implementado en Category y UserProfile, getRemainingTime declarado Transient para devolver un int
correctamente y Version funcionando.

